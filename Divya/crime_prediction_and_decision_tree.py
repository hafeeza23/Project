# -*- coding: utf-8 -*-
"""Crime prediction and decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12QwA7qyrKUYkJhwL3tmKYUw7CmG-1OJ4
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import scipy as sp
import matplotlib as mpl
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import pandas as pd
pd.set_option('display.width', 500)
pd.set_option('display.max_columns', 100)
pd.set_option('display.notebook_repr_html', True)
import seaborn as sns
sns.set_style("whitegrid")
sns.set_context("poster")

data_large=pd.read_csv('/content/drive/MyDrive/Project/Crime (18-p)/Crime - (18-p) 1_final.csv')

data=data_large
data.shape
data.head(5)

data=data.drop(['Unnamed: 0',	'Unnamed: 0.1'	] ,1)

data.head()

data.reset_index(inplace=True)
data.head(5)

data=data.drop(["index"], axis=1)
data.head(5)

data=data.drop(["ID","Date","Block","IUCR","Description","Ward","Community Area","FBI Code"], axis=1)
data=data.drop(["X Coordinate","Y Coordinate","Year","Location","District","Primary Type","time_24hour","Date_no_time"], axis=1)

a=list(data.columns.values)
droplist=[]
for i in a:
    if i.startswith("Primary Type"):
        droplist.append(i)
data=data.drop(droplist, axis=1)

from sklearn.model_selection import cross_validate

from sklearn.model_selection import train_test_split
itrain, itest = train_test_split(range(data.shape[0]), train_size=0.7)

mask=np.ones(data.shape[0], dtype='int')
mask[itrain]=1
mask[itest]=0
mask=(mask==1)

data.shape
data.head(5)

data=data.dropna()
np.nan_to_num(data)

from sklearn.preprocessing import StandardScaler
#Standardize training set
data.loc[mask,STANDARDIZABLE]=StandardScaler().fit_transform(data.loc[mask,STANDARDIZABLE])
#Standardize test set
data.loc[~mask,STANDARDIZABLE]=StandardScaler().fit_transform(data.loc[~mask,STANDARDIZABLE])
data.head(5)

from sklearn.tree import DecisionTreeClassifier
clfdt=DecisionTreeClassifier()
clfdt, Xtrain, ytrain, Xtest, ytest, confclfdt, training_accuracy, test_accuracy = do_classify(clfdt, {"max_depth":np.arange(1,20,2)}, data, total_features, u'severe',1, mask=mask)
confusion_dict["decision tree"]=confclfdt
model_dict["decision tree"]=clfdt
accuracy_dict["decision tree"]=training_accuracy
accuracy_dict1["decision tree"]=test_accuracy

